//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace Scada.Client.SL.WeatherWebService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ArrayOfString", Namespace="http://tempuri.org/", ItemName="string")]
    public class ArrayOfString : System.Collections.ObjectModel.ObservableCollection<string> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherWebService.WeatherWebServiceSoap")]
    public interface WeatherWebServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetWeather", ReplyAction="*")]
        System.IAsyncResult BeginGetWeather(Scada.Client.SL.WeatherWebService.GetWeatherRequest request, System.AsyncCallback callback, object asyncState);
        
        Scada.Client.SL.WeatherWebService.GetWeatherResponse EndGetWeather(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetWeatherRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetWeather", Namespace="http://tempuri.org/", Order=0)]
        public Scada.Client.SL.WeatherWebService.GetWeatherRequestBody Body;
        
        public GetWeatherRequest() {
        }
        
        public GetWeatherRequest(Scada.Client.SL.WeatherWebService.GetWeatherRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetWeatherRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string cityName;
        
        public GetWeatherRequestBody() {
        }
        
        public GetWeatherRequestBody(string cityName) {
            this.cityName = cityName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetWeatherResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetWeatherResponse", Namespace="http://tempuri.org/", Order=0)]
        public Scada.Client.SL.WeatherWebService.GetWeatherResponseBody Body;
        
        public GetWeatherResponse() {
        }
        
        public GetWeatherResponse(Scada.Client.SL.WeatherWebService.GetWeatherResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetWeatherResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public Scada.Client.SL.WeatherWebService.ArrayOfString GetWeatherResult;
        
        public GetWeatherResponseBody() {
        }
        
        public GetWeatherResponseBody(Scada.Client.SL.WeatherWebService.ArrayOfString GetWeatherResult) {
            this.GetWeatherResult = GetWeatherResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface WeatherWebServiceSoapChannel : Scada.Client.SL.WeatherWebService.WeatherWebServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWeatherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWeatherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Scada.Client.SL.WeatherWebService.ArrayOfString Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Scada.Client.SL.WeatherWebService.ArrayOfString)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WeatherWebServiceSoapClient : System.ServiceModel.ClientBase<Scada.Client.SL.WeatherWebService.WeatherWebServiceSoap>, Scada.Client.SL.WeatherWebService.WeatherWebServiceSoap {
        
        private BeginOperationDelegate onBeginGetWeatherDelegate;
        
        private EndOperationDelegate onEndGetWeatherDelegate;
        
        private System.Threading.SendOrPostCallback onGetWeatherCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WeatherWebServiceSoapClient() {
        }
        
        public WeatherWebServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WeatherWebServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherWebServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WeatherWebServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetWeatherCompletedEventArgs> GetWeatherCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Scada.Client.SL.WeatherWebService.WeatherWebServiceSoap.BeginGetWeather(Scada.Client.SL.WeatherWebService.GetWeatherRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWeather(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetWeather(string cityName, System.AsyncCallback callback, object asyncState) {
            Scada.Client.SL.WeatherWebService.GetWeatherRequest inValue = new Scada.Client.SL.WeatherWebService.GetWeatherRequest();
            inValue.Body = new Scada.Client.SL.WeatherWebService.GetWeatherRequestBody();
            inValue.Body.cityName = cityName;
            return ((Scada.Client.SL.WeatherWebService.WeatherWebServiceSoap)(this)).BeginGetWeather(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Scada.Client.SL.WeatherWebService.GetWeatherResponse Scada.Client.SL.WeatherWebService.WeatherWebServiceSoap.EndGetWeather(System.IAsyncResult result) {
            return base.Channel.EndGetWeather(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private Scada.Client.SL.WeatherWebService.ArrayOfString EndGetWeather(System.IAsyncResult result) {
            Scada.Client.SL.WeatherWebService.GetWeatherResponse retVal = ((Scada.Client.SL.WeatherWebService.WeatherWebServiceSoap)(this)).EndGetWeather(result);
            return retVal.Body.GetWeatherResult;
        }
        
        private System.IAsyncResult OnBeginGetWeather(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string cityName = ((string)(inValues[0]));
            return this.BeginGetWeather(cityName, callback, asyncState);
        }
        
        private object[] OnEndGetWeather(System.IAsyncResult result) {
            Scada.Client.SL.WeatherWebService.ArrayOfString retVal = this.EndGetWeather(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWeatherCompleted(object state) {
            if ((this.GetWeatherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWeatherCompleted(this, new GetWeatherCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWeatherAsync(string cityName) {
            this.GetWeatherAsync(cityName, null);
        }
        
        public void GetWeatherAsync(string cityName, object userState) {
            if ((this.onBeginGetWeatherDelegate == null)) {
                this.onBeginGetWeatherDelegate = new BeginOperationDelegate(this.OnBeginGetWeather);
            }
            if ((this.onEndGetWeatherDelegate == null)) {
                this.onEndGetWeatherDelegate = new EndOperationDelegate(this.OnEndGetWeather);
            }
            if ((this.onGetWeatherCompletedDelegate == null)) {
                this.onGetWeatherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWeatherCompleted);
            }
            base.InvokeAsync(this.onBeginGetWeatherDelegate, new object[] {
                        cityName}, this.onEndGetWeatherDelegate, this.onGetWeatherCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Scada.Client.SL.WeatherWebService.WeatherWebServiceSoap CreateChannel() {
            return new WeatherWebServiceSoapClientChannel(this);
        }
        
        private class WeatherWebServiceSoapClientChannel : ChannelBase<Scada.Client.SL.WeatherWebService.WeatherWebServiceSoap>, Scada.Client.SL.WeatherWebService.WeatherWebServiceSoap {
            
            public WeatherWebServiceSoapClientChannel(System.ServiceModel.ClientBase<Scada.Client.SL.WeatherWebService.WeatherWebServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetWeather(Scada.Client.SL.WeatherWebService.GetWeatherRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetWeather", _args, callback, asyncState);
                return _result;
            }
            
            public Scada.Client.SL.WeatherWebService.GetWeatherResponse EndGetWeather(System.IAsyncResult result) {
                object[] _args = new object[0];
                Scada.Client.SL.WeatherWebService.GetWeatherResponse _result = ((Scada.Client.SL.WeatherWebService.GetWeatherResponse)(base.EndInvoke("GetWeather", _args, result)));
                return _result;
            }
        }
    }
}
