//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace Scada.Client.SL.ScadaDeviceService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ScadaDeviceService.ScadaDeviceServiceSoap")]
    public interface ScadaDeviceServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Add", ReplyAction="*")]
        System.IAsyncResult BeginAdd(int x, int y, System.AsyncCallback callback, object asyncState);
        
        int EndAdd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/GetListDeviceInfo", ReplyAction="*")]
        System.IAsyncResult BeginGetListDeviceInfo(Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoRequest request, System.AsyncCallback callback, object asyncState);
        
        Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoResponse EndGetListDeviceInfo(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetListDeviceInfoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetListDeviceInfo", Namespace="http://tempuri.org/", Order=0)]
        public Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoRequestBody Body;
        
        public GetListDeviceInfoRequest() {
        }
        
        public GetListDeviceInfoRequest(Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoRequestBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetListDeviceInfoRequestBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=0)]
        public System.Guid DeviceID;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int DeviceType;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.Nullable<System.DateTime> StartDate;
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public System.Nullable<System.DateTime> EndDate;
        
        public GetListDeviceInfoRequestBody() {
        }
        
        public GetListDeviceInfoRequestBody(System.Guid DeviceID, int DeviceType, System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate) {
            this.DeviceID = DeviceID;
            this.DeviceType = DeviceType;
            this.StartDate = StartDate;
            this.EndDate = EndDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetListDeviceInfoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetListDeviceInfoResponse", Namespace="http://tempuri.org/", Order=0)]
        public Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoResponseBody Body;
        
        public GetListDeviceInfoResponse() {
        }
        
        public GetListDeviceInfoResponse(Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoResponseBody Body) {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetListDeviceInfoResponseBody {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string GetListDeviceInfoResult;
        
        public GetListDeviceInfoResponseBody() {
        }
        
        public GetListDeviceInfoResponseBody(string GetListDeviceInfoResult) {
            this.GetListDeviceInfoResult = GetListDeviceInfoResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ScadaDeviceServiceSoapChannel : Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetListDeviceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetListDeviceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ScadaDeviceServiceSoapClient : System.ServiceModel.ClientBase<Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap>, Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap {
        
        private BeginOperationDelegate onBeginAddDelegate;
        
        private EndOperationDelegate onEndAddDelegate;
        
        private System.Threading.SendOrPostCallback onAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetListDeviceInfoDelegate;
        
        private EndOperationDelegate onEndGetListDeviceInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetListDeviceInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ScadaDeviceServiceSoapClient() {
        }
        
        public ScadaDeviceServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ScadaDeviceServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScadaDeviceServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ScadaDeviceServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<AddCompletedEventArgs> AddCompleted;
        
        public event System.EventHandler<GetListDeviceInfoCompletedEventArgs> GetListDeviceInfoCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap.BeginAdd(int x, int y, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdd(x, y, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap.EndAdd(System.IAsyncResult result) {
            return base.Channel.EndAdd(result);
        }
        
        private System.IAsyncResult OnBeginAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int x = ((int)(inValues[0]));
            int y = ((int)(inValues[1]));
            return ((Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap)(this)).BeginAdd(x, y, callback, asyncState);
        }
        
        private object[] OnEndAdd(System.IAsyncResult result) {
            int retVal = ((Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap)(this)).EndAdd(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddCompleted(object state) {
            if ((this.AddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddCompleted(this, new AddCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAsync(int x, int y) {
            this.AddAsync(x, y, null);
        }
        
        public void AddAsync(int x, int y, object userState) {
            if ((this.onBeginAddDelegate == null)) {
                this.onBeginAddDelegate = new BeginOperationDelegate(this.OnBeginAdd);
            }
            if ((this.onEndAddDelegate == null)) {
                this.onEndAddDelegate = new EndOperationDelegate(this.OnEndAdd);
            }
            if ((this.onAddCompletedDelegate == null)) {
                this.onAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddCompleted);
            }
            base.InvokeAsync(this.onBeginAddDelegate, new object[] {
                        x,
                        y}, this.onEndAddDelegate, this.onAddCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap.BeginGetListDeviceInfo(Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetListDeviceInfo(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginGetListDeviceInfo(System.Guid DeviceID, int DeviceType, System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate, System.AsyncCallback callback, object asyncState) {
            Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoRequest inValue = new Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoRequest();
            inValue.Body = new Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoRequestBody();
            inValue.Body.DeviceID = DeviceID;
            inValue.Body.DeviceType = DeviceType;
            inValue.Body.StartDate = StartDate;
            inValue.Body.EndDate = EndDate;
            return ((Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap)(this)).BeginGetListDeviceInfo(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoResponse Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap.EndGetListDeviceInfo(System.IAsyncResult result) {
            return base.Channel.EndGetListDeviceInfo(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndGetListDeviceInfo(System.IAsyncResult result) {
            Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoResponse retVal = ((Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap)(this)).EndGetListDeviceInfo(result);
            return retVal.Body.GetListDeviceInfoResult;
        }
        
        private System.IAsyncResult OnBeginGetListDeviceInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid DeviceID = ((System.Guid)(inValues[0]));
            int DeviceType = ((int)(inValues[1]));
            System.Nullable<System.DateTime> StartDate = ((System.Nullable<System.DateTime>)(inValues[2]));
            System.Nullable<System.DateTime> EndDate = ((System.Nullable<System.DateTime>)(inValues[3]));
            return this.BeginGetListDeviceInfo(DeviceID, DeviceType, StartDate, EndDate, callback, asyncState);
        }
        
        private object[] OnEndGetListDeviceInfo(System.IAsyncResult result) {
            string retVal = this.EndGetListDeviceInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetListDeviceInfoCompleted(object state) {
            if ((this.GetListDeviceInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetListDeviceInfoCompleted(this, new GetListDeviceInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetListDeviceInfoAsync(System.Guid DeviceID, int DeviceType, System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate) {
            this.GetListDeviceInfoAsync(DeviceID, DeviceType, StartDate, EndDate, null);
        }
        
        public void GetListDeviceInfoAsync(System.Guid DeviceID, int DeviceType, System.Nullable<System.DateTime> StartDate, System.Nullable<System.DateTime> EndDate, object userState) {
            if ((this.onBeginGetListDeviceInfoDelegate == null)) {
                this.onBeginGetListDeviceInfoDelegate = new BeginOperationDelegate(this.OnBeginGetListDeviceInfo);
            }
            if ((this.onEndGetListDeviceInfoDelegate == null)) {
                this.onEndGetListDeviceInfoDelegate = new EndOperationDelegate(this.OnEndGetListDeviceInfo);
            }
            if ((this.onGetListDeviceInfoCompletedDelegate == null)) {
                this.onGetListDeviceInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetListDeviceInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetListDeviceInfoDelegate, new object[] {
                        DeviceID,
                        DeviceType,
                        StartDate,
                        EndDate}, this.onEndGetListDeviceInfoDelegate, this.onGetListDeviceInfoCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap CreateChannel() {
            return new ScadaDeviceServiceSoapClientChannel(this);
        }
        
        private class ScadaDeviceServiceSoapClientChannel : ChannelBase<Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap>, Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap {
            
            public ScadaDeviceServiceSoapClientChannel(System.ServiceModel.ClientBase<Scada.Client.SL.ScadaDeviceService.ScadaDeviceServiceSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAdd(int x, int y, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = x;
                _args[1] = y;
                System.IAsyncResult _result = base.BeginInvoke("Add", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAdd(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Add", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetListDeviceInfo(Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("GetListDeviceInfo", _args, callback, asyncState);
                return _result;
            }
            
            public Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoResponse EndGetListDeviceInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoResponse _result = ((Scada.Client.SL.ScadaDeviceService.GetListDeviceInfoResponse)(base.EndInvoke("GetListDeviceInfo", _args, result)));
                return _result;
            }
        }
    }
}
